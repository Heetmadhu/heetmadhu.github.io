[{"authors":null,"categories":null,"content":"Currently pursuing my masters in Computer Science from The University of Texas at Arlington having specialization in Artificial Intelligence and Database.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"https://heetmadhu.github.io/author/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/admin/","section":"author","summary":"Currently pursuing my masters in Computer Science from The University of Texas at Arlington having specialization in Artificial Intelligence and Database.","tags":null,"title":"","type":"author"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"d41d8cd98f00b204e9800998ecf8427e","permalink":"https://heetmadhu.github.io/author/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/","section":"author","summary":"","tags":null,"title":"Authors","type":"author"},{"authors":null,"categories":null,"content":" Multinomial Naive Bayes Classifier Naive Bayes classification works on probability of individual features within document. For movie classification movie description is data and each word or term in description is feature.\nFormula t1, t2, t3, \u0026hellip; = Terms in data\nP(Genre|[t1, t2, t3, \u0026hellip;]) = P(Genre) * P(t1|Genre) * P(t2|Genre) * P(t3|Genre) * \u0026hellip;\nGenres  Comedy Action Animation Romance Adventure Horror  Multilabel Classification Movies can belongs to many classes such as an animation movie can be comedy as well. Multilabel classification is little bit triky. The model should return multiple genres. Following are the few techniques I have used.\n1. Top Results\nIn top result technique it returns top n genres which has highest probability.\nPros: Easy and fast. Cons: In most cases movies does not belongs to exactly n genres, it might belongs to less than or greater that n genres.\n2. Threshold\nIn threshold it returns genres which has probability greater than threshold. We can find good threshold value by applying and evaluating different values.\n\r Cons: In naive bayes with text the range of probability changes with the number of terms in document. For example for one test case probability for genres might between 1.0e-1 to 1.0e-5 and for other it might be between 1.0e-10 to 1.0e-20 so there might be cases when it classify to all genres and ther might be case where it does not classify to any genre as well.\n3. Mean\nIn this tehnique it returns the geners which has higher probability than other genres. For movie it first calculate probability using naive bayes theorem than it perform log and find mean of each genres, then it will return genres which has higher value than mean. In addition it has one variable which is muliplied by mean while comparing with each genre\u0026rsquo;s value and we can find good value by applying different values in this case we can use F1 Score and evaluate on validation data. \r\nChallenges Accuracy Improving accuracy was major challenge for this project. Following are the techniques used to improve accuracy.\n Stopwords  Stop words are the words which does not play significant role in solving problem such as \u0026ldquo;the\u0026rdquo;, \u0026ldquo;a\u0026rdquo;, \u0026ldquo;this\u0026rdquo;, etc. These words does not give any clue about genre and also these words repeats very much and that creates problem in classification.\nAccuracy with stopwords: 0.5024773649566582\nAccuracy without stopwords: 0.5178779592087157\n Lemmatization  Lemmatization is a process of finding root word for example \u0026ldquo;having\u0026rdquo; word is converted into \u0026ldquo;have\u0026rdquo;.\nAccuracy after applying lemmatization: 0.527629565354579\nReferences\n https://nlp.stanford.edu/IR-book/pdf/13bayes.pdf\n https://docs.python.org/2/library/collections.html\n https://www.numpy.org/devdocs/\n  ","date":1555218000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555218000,"objectID":"732894698a77bf391332e865cdfbc8bd","permalink":"https://heetmadhu.github.io/post/movie-classification/","publishdate":"2019-04-14T00:00:00-05:00","relpermalink":"/post/movie-classification/","section":"post","summary":"Movie description multi label classification into genres using multinomial naive bayes classifier.","tags":null,"title":"Movie Classification","type":"post"},{"authors":null,"categories":null,"content":" Item Based Collaborative Filtering Recommender In item based collaborative filtering similarity between item\u0026rsquo;s are used to recommend items to users. In this method if user is looking for item or has liked any item than similar items are recommended to that uers. We use cosine similarity between items to find similarity.\nFormula for cosine similarity \r Tf-idf In this movie recommendation it uses tf-idf to find similarity between movies. Cosine similarity between user\u0026rsquo;s selected movie to all other movies are calculted and top 20 results are shown to the users.\nChallenges Time Consuming\nTo calculate cosine similarity of a movie to all movies for every new movie selection is very inefficient so instead of calculating cosine similarity at runtime we can calculate and cosine similarity of all movies to all movies before hosting and can use that matrix at runtime that will not take too much time.\nReferences\n https://www.ics.uci.edu/~welling/teaching/CS77Bwinter12/presentations/course_Ricci/13-Item-to-Item-Matrix-CF.pdf\n https://nlp.stanford.edu/IR-book/pdf/06vect.pdf\n  ","date":1555218000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555218000,"objectID":"5f726d75d8c6e47c628e37c7ad304753","permalink":"https://heetmadhu.github.io/post/movie-recommender/","publishdate":"2019-04-14T00:00:00-05:00","relpermalink":"/post/movie-recommender/","section":"post","summary":"Movie recommender systerm that recommend movies based on user's history.","tags":null,"title":"Movie Recommender","type":"post"},{"authors":null,"categories":null,"content":" Term Frequency (tf) Term-Frequency(df) of term t for document d is the number of term frequency in the documents.\nInverse Document Frequency Inverse Document Frequency(idf) is defined by following equation where N is the total documents having term t and df is the term frequncy for document d.\n\r Term Frequency- Inverted Document Frequency Term Frequency(df) and Inverted Document Frequency(idf) is combined to produce composite weight for each term and in each document using following equation.\n\r Similarity To find similarity between search query and movies first I have generated word vector for each movie and using word vectors inverted term frequency was calculated. Now for new query we need to generate word vector of query and then calculate inverted term frequency. After that we need to calculate cosine similarity between inverted term frequency of query and of each movie. Then we will find top results whose cosine similarity is maximum.\nChallenges Efficiency\nTo implement function to calculate tf-idf for individual documents and terms is very resouce consuming process and to implement in efficient way is very important. I have tried different algorithms to improve time taken by functions. Initially it was taking around 2 minutes to calculate all the values and after imroving code it just take around 30 seconds.\nReferences\n https://www.kaggle.com/rounakbanik/the-movies-dataset/kernels\n https://nlp.stanford.edu/IR-book/pdf/06vect.pdf\n http://flask.pocoo.org/docs/\n http://pandas.pydata.org/pandas-docs/stable/\n  ","date":1555218000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555218000,"objectID":"88894e8c1ce1a6360f5eca5df288f9dc","permalink":"https://heetmadhu.github.io/post/movie-search/","publishdate":"2019-04-14T00:00:00-05:00","relpermalink":"/post/movie-search/","section":"post","summary":"Movie search engine that acceplt user query and search movies from dataset using the tf-idf score and returns top k result.","tags":null,"title":"Movie Search","type":"post"},{"authors":null,"categories":null,"content":"","date":1461733200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461733200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://heetmadhu.github.io/project/internal-project/","publishdate":"2016-04-27T00:00:00-05:00","relpermalink":"/project/internal-project/","section":"project","summary":"We have developed an application for personal computer from which user can perform mouse operations with hand gestures only. The application uses camera to identify gestures.","tags":null,"title":"Gesture Controller","type":"project"},{"authors":null,"categories":null,"content":"","date":1461733200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461733200,"objectID":"99f88755188bde2bf7dba99d310e1a83","permalink":"https://heetmadhu.github.io/termproject/movie-project/","publishdate":"2016-04-27T00:00:00-05:00","relpermalink":"/termproject/movie-project/","section":"termproject","summary":"Movie recommender that will help and will save time of users by suggesting movies that they might like according to their search criteria and past ratings.","tags":null,"title":"Movie Recommender","type":"termproject"},{"authors":null,"categories":null,"content":" Project Proposal Movie recommender website that will help and will save time of users by suggesting movies that they might like according to their search criteria and past rating history.\nDataset: TMDB Movie Dataset\nDescription: The dataset comprise of 26 million rating by 2,70,000 users of 45,000 movies. It also includes language, budget, genres, popularity, revenue etc.\nFeatures\n Provide movie suggestions according userâ€™s input. Provide movie suggestions by their past history.  Similar Applications:\n Amazon Prime Netflix Movix Youtube  Objective: People often spend time wasting in the search of movies that they want to watch due to availability of too much options. Movie Recommendation System will help users to find movies accordingly userâ€™s search keywords and similar movies which they liked before. This application will save userâ€™s time and efforts in searching process.\nInitial Sketch\n\r\rLogin Page Design\r\r \rSearch Page Design\r\r \rSearch Result Page Design\r\r\nDesign Sketch\n\r\rSearch Page Design\r\r \rSearch Results\r\r \rClassification\r\r \rClassification Results\r\r \rRecommendation\r\r \rRecommendation Results\r\r\nReport Text Extraction\nObjective of this project is to use text data of movies to calculate inverted term frequency and use that to find similarity between userâ€™s search query and movies. In the TMDB Movies dataset, there are many text fields such as movie title, tagline, overview, keywords, genres, production companies, cast, crew, languages, etc. Title, tagline, overview are in string format and can be used directly, but fields like keywords, genres, production companies are in list of dict format so first I have converted string to literal structure then I have extracted only necessary fields such as name. Other source of information are casts and characters of movies, I can use information about actors and role they played. Similarly from crew information I have only extracted name of director, producer, writer which is good source of information. In the end I have constructed document for each movies that contains all the text data mentioned above. For better results I have applied snowball stemmer.\nSearch Result\nTo find similarity between search query and movies first I have generated word vector for each movie and using word vectors inverted term frequency was calculated. Now for new query we need to generate word vector of query and then calculate inverted term frequency. After that we need to calculate cosine similarity between inverted term frequency of query and of each movie. Then we will find top results whose cosine similarity is maximum.\nReferences\n https://www.kaggle.com/rounakbanik/the-movies-dataset/kernels\n https://scikit-learn.org/stable/documentation.html\n http://flask.pocoo.org/docs/\n http://pandas.pydata.org/pandas-docs/stable/\n  ","date":1461733200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461733200,"objectID":"8680b57cbc973c2873a39cc293605ff7","permalink":"https://heetmadhu.github.io/project/movie-project/","publishdate":"2016-04-27T00:00:00-05:00","relpermalink":"/project/movie-project/","section":"project","summary":"Movie recommender that will help and will save time of users by suggesting movies that they might like according to their search criteria and past ratings.","tags":null,"title":"Movie Search","type":"project"},{"authors":null,"categories":null,"content":"","date":1461733200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461733200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://heetmadhu.github.io/project/external-project/","publishdate":"2016-04-27T00:00:00-05:00","relpermalink":"/project/external-project/","section":"project","summary":"An android app which sends SMS containing the URL of location with predefined message when any one go to our app and tap the emergency button to the relatives which they have selected previously. .","tags":["Demo"],"title":"Stay Alive","type":"project"}]